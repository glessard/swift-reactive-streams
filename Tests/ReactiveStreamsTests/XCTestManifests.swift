#if !canImport(ObjectiveC)
import XCTest

extension DeferredOperationsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DeferredOperationsTests = [
        ("testFinalOutcome", testFinalOutcome),
        ("testNext", testNext),
    ]
}

extension DeferredStreamTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DeferredStreamTests = [
        ("testDeferredStreamAlreadyDetermined", testDeferredStreamAlreadyDetermined),
        ("testDeferredStreamWithError", testDeferredStreamWithError),
        ("testDeferredStreamWithValue", testDeferredStreamWithValue),
    ]
}

extension SingleValueSubscriberTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SingleValueSubscriberTests = [
        ("testSingleValueSubscriberCancelled", testSingleValueSubscriberCancelled),
        ("testSingleValueSubscriberWithError", testSingleValueSubscriberWithError),
        ("testSingleValueSubscriberWithValue", testSingleValueSubscriberWithValue),
    ]
}

extension eventTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__eventTests = [
        ("testDescription", testDescription),
        ("testEquals", testEquals),
        ("testGetters", testGetters),
        ("testHashable", testHashable),
    ]
}

extension filterTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__filterTests = [
        ("testCompact1", testCompact1),
        ("testCompact2", testCompact2),
        ("testCompactMap", testCompactMap),
        ("testFilter1", testFilter1),
        ("testFilter2", testFilter2),
    ]
}

extension flatMapTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__flatMapTests = [
        ("testFlatMap1", testFlatMap1),
        ("testFlatMap2", testFlatMap2),
        ("testFlatMap3", testFlatMap3),
        ("testFlatMap4", testFlatMap4),
        ("testFlatMap5", testFlatMap5),
        ("testFlatMap6", testFlatMap6),
        ("testFlatMap7", testFlatMap7),
        ("testFlatMap8", testFlatMap8),
    ]
}

extension mapTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__mapTests = [
        ("testMap1", testMap1),
        ("testMap2", testMap2),
        ("testMap3", testMap3),
    ]
}

extension mergeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__mergeTests = [
        ("testMerge1", testMerge1),
        ("testMerge2", testMerge2),
        ("testMerge3", testMerge3),
        ("testMerge4", testMerge4),
        ("testMerge5", testMerge5),
        ("testMerge6", testMerge6),
        ("testMerge7", testMerge7),
        ("testMerge8", testMerge8),
        ("testMergeDelayingError1", testMergeDelayingError1),
        ("testMergeDelayingError2", testMergeDelayingError2),
    ]
}

extension notificationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__notificationTests = [
        ("testOnComplete", testOnComplete),
        ("testOnError", testOnError),
        ("testOnEvent", testOnEvent),
        ("testOnValue", testOnValue),
    ]
}

extension notifierTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__notifierTests = [
        ("testOnComplete", testOnComplete),
        ("testOnError", testOnError),
        ("testOnEvent1", testOnEvent1),
        ("testOnEvent2", testOnEvent2),
        ("testOnValue1", testOnValue1),
        ("testOnValue2", testOnValue2),
    ]
}

extension onRequestTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__onRequestTests = [
        ("testLifetime", testLifetime),
        ("testOnRequest1", testOnRequest1),
        ("testOnRequest2", testOnRequest2),
        ("testOnRequest3", testOnRequest3),
    ]
}

extension postBoxTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__postBoxTests = [
        ("testPerformanceDequeue", testPerformanceDequeue),
        ("testPostAfterCompletion", testPostAfterCompletion),
        ("testPostBoxSubClass", testPostBoxSubClass),
        ("testPostConcurrentProducers", testPostConcurrentProducers),
        ("testPostDeinitWithPendingEvents", testPostDeinitWithPendingEvents),
        ("testPostDoubleTermination", testPostDoubleTermination),
        ("testPostErrorWithoutRequest", testPostErrorWithoutRequest),
        ("testPostErrorWithoutSubscribers", testPostErrorWithoutSubscribers),
        ("testPostNormal", testPostNormal),
    ]
}

extension reduceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__reduceTests = [
        ("testCoalesce", testCoalesce),
        ("testCountEvents", testCountEvents),
        ("testFinal1", testFinal1),
        ("testFinal2", testFinal2),
        ("testReduce1", testReduce1),
        ("testReduce2", testReduce2),
        ("testReduceEmptyStream", testReduceEmptyStream),
    ]
}

extension streamTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__streamTests = [
        ("testLastSubscriber", testLastSubscriber),
        ("testLifetime1", testLifetime1),
        ("testLifetime2", testLifetime2),
        ("testLifetime3", testLifetime3),
        ("testNextN", testNextN),
        ("testNextTruncated", testNextTruncated),
        ("testPaused1", testPaused1),
        ("testPaused2", testPaused2),
        ("testPaused3", testPaused3),
        ("testRequestedReset", testRequestedReset),
        ("testSkipN", testSkipN),
        ("testSplit0", testSplit0),
        ("testSplit1", testSplit1),
        ("testSplit2", testSplit2),
        ("testSplit3", testSplit3),
        ("testSplit4", testSplit4),
        ("testSplit5", testSplit5),
        ("testStreamState", testStreamState),
    ]
}

extension subscriberTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__subscriberTests = [
        ("testSubscriber1", testSubscriber1),
        ("testSubscriber2", testSubscriber2),
        ("testSubscriber3", testSubscriber3),
    ]
}

extension timerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__timerTests = [
        ("testTimerCreation", testTimerCreation),
        ("testTimerTiming", testTimerTiming),
        ("testUnusedTimer", testUnusedTimer),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(DeferredOperationsTests.__allTests__DeferredOperationsTests),
        testCase(DeferredStreamTests.__allTests__DeferredStreamTests),
        testCase(SingleValueSubscriberTests.__allTests__SingleValueSubscriberTests),
        testCase(eventTests.__allTests__eventTests),
        testCase(filterTests.__allTests__filterTests),
        testCase(flatMapTests.__allTests__flatMapTests),
        testCase(mapTests.__allTests__mapTests),
        testCase(mergeTests.__allTests__mergeTests),
        testCase(notificationTests.__allTests__notificationTests),
        testCase(notifierTests.__allTests__notifierTests),
        testCase(onRequestTests.__allTests__onRequestTests),
        testCase(postBoxTests.__allTests__postBoxTests),
        testCase(reduceTests.__allTests__reduceTests),
        testCase(streamTests.__allTests__streamTests),
        testCase(subscriberTests.__allTests__subscriberTests),
        testCase(timerTests.__allTests__timerTests),
    ]
}
#endif
